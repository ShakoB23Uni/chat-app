@{
    ViewData["Title"] = "Chat";
}

<div class="container-fluid">
    <div class="row">
        <!-- Users List -->
        <div class="col-md-3 border-end" style="height: 85vh; overflow-y: auto;">
            <div class="p-3">
                <h5>Registered Users</h5>
                <div id="usersList" class="list-group">
                    <!-- Users will be loaded via JavaScript -->
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-md-9">
            <div class="chat-container" style="height: 85vh; display: flex; flex-direction: column;">
                <!-- Chat Header -->
                <div class="chat-header p-3 border-bottom bg-light">
                    <div id="chatHeader" class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 id="chatWithUser" class="mb-0">Select a user to start chatting</h5>
                            <small id="chatUserStatus" class="text-muted"></small>
                        </div>
                        <div>
                            <span class="badge bg-primary">Welcome, <span id="currentUserDisplay"></span>!</span>
                        </div>
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="messages-container flex-grow-1 p-3" style="overflow-y: auto; max-height: calc(85vh - 120px);">
                    <div id="messagesList" class="messages-list">
                        <div class="text-center text-muted">
                            <p>Select a user from the left panel to start chatting</p>
                        </div>
                    </div>
                </div>

                <!-- Message Input -->
                <div class="message-input p-3 border-top bg-light">
                    <form id="messageForm" class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." disabled autocomplete="off" />
                        <button type="submit" id="sendButton" class="btn btn-primary" disabled>
                            <i class="fas fa-paper-plane"></i> Send
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        // Check authentication on page load
        document.addEventListener('DOMContentLoaded', function() {
            if (!localAuth.isAuthenticated()) {
                alert('Please log in to access the chat.');
                window.location.href = '/Identity/Account/Login';
                return;
            }
            
            initializeChat();
        });

        // Global variables
        let connection;
        let currentChatUserId = null;
        let currentUser = null;

        // Initialize chat
        function initializeChat() {
            currentUser = localAuth.getCurrentUser();
            if (!currentUser) {
                window.location.href = '/Identity/Account/Login';
                return;
            }

            // Update UI with current user
            document.getElementById('currentUserDisplay').textContent = currentUser.displayName;

            // Load users
            loadUsers();

            // Initialize SignalR
            initializeSignalR();

            // Set up event listeners
            setupEventListeners();

            // Update last seen
            localAuth.updateLastSeen();
        }

        // Load users list
        function loadUsers() {
            const users = localAuth.getAllUsers();
            const usersList = document.getElementById('usersList');
            usersList.innerHTML = '';

            users.forEach(user => {
                if (user.email !== currentUser.email) {
                    const userItem = document.createElement('a');
                    userItem.href = '#';
                    userItem.className = 'list-group-item list-group-item-action user-item';
                    userItem.dataset.userId = user.id || user.email;
                    userItem.dataset.userName = user.displayName;
                    userItem.dataset.userEmail = user.email;

                    userItem.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${user.displayName}</h6>
                            <small class="online-status">
                                <span class="badge bg-secondary">Available</span>
                            </small>
                        </div>
                    `;

                    usersList.appendChild(userItem);
                }
            });
        }

        // Initialize SignalR connection
        async function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            // Handle incoming messages
            connection.on("ReceiveMessage", function (senderId, senderName, message, timestamp) {
                addMessageToChat(senderId, senderName, message, timestamp, false);
                
                // Save message to localStorage
                saveMessage(senderId, currentUser.id, message, timestamp, senderName, currentUser.displayName);
                
                // If this message is from the current chat user, scroll to bottom
                if (senderId === currentChatUserId) {
                    scrollToBottom();
                }
            });

            // Handle message sent confirmation
            connection.on("MessageSent", function (receiverId, receiverName, message, timestamp) {
                addMessageToChat(currentUser.id, currentUser.displayName, message, timestamp, true);
                
                // Save message to localStorage
                saveMessage(currentUser.id, receiverId, message, timestamp, currentUser.displayName, receiverName);
                
                scrollToBottom();
            });

            try {
                await connection.start();
                console.log("SignalR connection established");
            } catch (err) {
                console.error("Error establishing SignalR connection:", err);
                setTimeout(initializeSignalR, 5000); // Retry after 5 seconds
            }
        }

        // Save message to localStorage
        function saveMessage(senderId, receiverId, content, timestamp, senderName, receiverName) {
            const messages = JSON.parse(localStorage.getItem('chatMessages') || '[]');
            const message = {
                id: Date.now() + Math.random(),
                senderId: senderId,
                receiverId: receiverId,
                content: content,
                timestamp: timestamp,
                senderName: senderName,
                receiverName: receiverName,
                isRead: false
            };
            
            messages.push(message);
            localStorage.setItem('chatMessages', JSON.stringify(messages));
        }

        // Load messages for a specific user
        function loadMessages(userId) {
            const allMessages = JSON.parse(localStorage.getItem('chatMessages') || '[]');
            const messages = allMessages.filter(msg => 
                (msg.senderId === currentUser.id && msg.receiverId === userId) ||
                (msg.senderId === userId && msg.receiverId === currentUser.id)
            );

            const messagesList = document.getElementById('messagesList');
            messagesList.innerHTML = '';

            messages.forEach(msg => {
                addMessageToChat(msg.senderId, msg.senderName, msg.content, msg.timestamp, false);
            });

            scrollToBottom();
        }

        // Add message to chat
        function addMessageToChat(senderId, senderName, message, timestamp, isSent) {
            const messagesList = document.getElementById('messagesList');
            const messageDiv = document.createElement('div');
            
            const isCurrentUser = senderId === currentUser.id;
            const alignClass = isCurrentUser ? 'text-end' : 'text-start';
            const bgClass = isCurrentUser ? 'bg-primary text-white' : 'bg-light';
            
            messageDiv.innerHTML = `
                <div class="mb-2 ${alignClass}">
                    <div class="d-inline-block p-2 rounded ${bgClass}" style="max-width: 70%;">
                        <div class="message-content">${escapeHtml(message)}</div>
                        <small class="message-time opacity-75">${senderName} - ${timestamp}</small>
                    </div>
                </div>
            `;
            
            messagesList.appendChild(messageDiv);
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Scroll to bottom of messages
        function scrollToBottom() {
            const messagesContainer = document.querySelector('.messages-container');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (message && currentChatUserId && connection) {
                try {
                    const timestamp = new Date().toLocaleTimeString();
                    await connection.invoke("SendMessage", currentChatUserId, message);
                    messageInput.value = '';
                } catch (error) {
                    console.error('Error sending message:', error);
                    // If SignalR fails, still add message locally
                    const timestamp = new Date().toLocaleTimeString();
                    addMessageToChat(currentUser.id, currentUser.displayName, message, timestamp, true);
                    saveMessage(currentUser.id, currentChatUserId, message, timestamp, currentUser.displayName, 'Unknown');
                    messageInput.value = '';
                    scrollToBottom();
                }
            }
        }

        // Set up event listeners
        function setupEventListeners() {
            // User selection
            document.addEventListener('click', function(e) {
                if (e.target.closest('.user-item')) {
                    e.preventDefault();
                    const userItem = e.target.closest('.user-item');
                    const userId = userItem.dataset.userId;
                    const userName = userItem.dataset.userName;
                    
                    // Update UI
                    document.querySelectorAll('.user-item').forEach(item => item.classList.remove('active'));
                    userItem.classList.add('active');
                    
                    // Update chat header
                    document.getElementById('chatWithUser').textContent = `Chatting with ${userName}`;
                    document.getElementById('chatUserStatus').textContent = '';
                    
                    // Enable message input
                    document.getElementById('messageInput').disabled = false;
                    document.getElementById('sendButton').disabled = false;
                    
                    // Set current chat user
                    currentChatUserId = userId;
                    
                    // Load messages
                    loadMessages(userId);
                }
            });

            // Message form submission
            document.getElementById('messageForm').addEventListener('submit', function(e) {
                e.preventDefault();
                sendMessage();
            });

            // Enter key to send message
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }
    </script>
    
    <style>
        .messages-container {
            background-color: #f8f9fa;
        }
        
        .user-item.active {
            background-color: #0d6efd !important;
            color: white !important;
        }
        
        .user-item.active .badge {
            background-color: rgba(255, 255, 255, 0.2) !important;
        }
        
        .message-content {
            word-wrap: break-word;
        }
        
        .message-time {
            font-size: 0.75rem;
            display: block;
            margin-top: 0.25rem;
        }
        
        .chat-container {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
        }
    </style>
} 